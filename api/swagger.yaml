---
swagger: "2.0"
info:
  description: "Test work for rosberry"
  version: "0.0.1"
  title: "Rosberry Mobile APP API (Test work)"
host: "virtserver.swaggerhub.com"
basePath: "/Sm1Le55/Rosberry/0.0.1"
schemes:
- "https"
paths:
  /user/registration:
    post:
      tags:
      - "user"
      summary: "Registration new user"
      operationId: "registrationUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information by user registration"
        required: true
        schema:
          $ref: "#/definitions/UserRegLoginData"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful operation"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information by user login"
        required: true
        schema:
          $ref: "#/definitions/UserRegLoginData"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "User authorization"
          schema:
            $ref: "#/definitions/UserAuthInfo"
        "401":
          description: "Invalid email/password supplied"
  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logs out current logged user"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The user email for login"
        required: true
        type: "string"
        x-exportParamName: "Email"
      responses:
        "200":
          description: "Successful operation"
        "401":
          description: "An authorization header is required"
        "404":
          description: "User not found"
      security:
      - AccessKey: []
  /user/settings/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user display settings by UserID"
      description: "Return user display settings"
      operationId: "getDisplaySettings"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/DisplaySettings"
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
  /user/settings/set:
    post:
      tags:
      - "user"
      summary: "Set display settings for the user"
      operationId: "setDisplaySettings"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information by user login"
        required: true
        schema:
          $ref: "#/definitions/DisplaySettings"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful operation"
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
  /profile/{userId}:
    get:
      tags:
      - "profile"
      summary: "Get user profile by UserID"
      description: "Return user profile"
      operationId: "getUserProfile"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Profile"
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
  /profile/update:
    post:
      tags:
      - "profile"
      summary: "Update a user profile in the database"
      operationId: "updateUserProfile"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information by user login"
        required: true
        schema:
          $ref: "#/definitions/Profile"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Successful operation"
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
  /profile/showList:
    get:
      tags:
      - "profile"
      summary: "Get profiles list with offset and limit"
      operationId: "showProfiles"
      produces:
      - "applicataion/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/ListRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Profile"
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
  /themes:
    get:
      tags:
      - "themes"
      summary: "Get themes list"
      operationId: "themesList"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              example: ""
        "401":
          description: "An authorization header is required"
      security:
      - AccessKey: []
securityDefinitions:
  AccessKey:
    type: "apiKey"
    name: "AccessKey"
    in: "header"
definitions:
  UserRegLoginData:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        description: "Password in MD5 hash"
  UserAuthInfo:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int"
      accessKey:
        type: "string"
    example:
      accessKey: "accessKey"
      userId: 0
  Profile:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int"
      name:
        type: "string"
      avatar:
        type: "string"
        description: "image data in base64"
      birthday:
        type: "string"
        description: "birthday in ISO 8601"
      interests:
        type: "array"
        items:
          type: "string"
          example: ""
    example:
      birthday: "birthday"
      name: "name"
      avatar: "avatar"
      interests:
      - ""
      - ""
      userId: 0
  ListRequest:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int"
      limit:
        type: "integer"
        format: "int"
      offset:
        type: "integer"
        format: "int"
  DisplaySettings:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int"
      showMeAges:
        type: "string"
        enum:
        - "all"
        - "18-24"
        - "25-40"
        - "40+"
      hideMeFromAges:
        type: "string"
        enum:
        - "all"
        - "18-24"
        - "25-40"
        - "40+"
      showThemes:
        type: "array"
        items:
          type: "string"
          example: ""
      hideThemes:
        type: "array"
        items:
          type: "string"
          example: ""
      location:
        type: "string"
        enum:
        - "world"
        - "—Åountry"
        - "nearby"
    example:
      showThemes:
      - ""
      - ""
      hideMeFromAges: "all"
      location: "world"
      userId: 0
      hideThemes:
      - ""
      - ""
      showMeAges: "all"
